{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://pastehuman-extension/./src/popup.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  // DOM Elements\n  const elements = {\n    customText: document.getElementById('customText'),\n    speedPreset: document.getElementById('speedPreset'),\n    customSpeedGroup: document.getElementById('customSpeedGroup'),\n    customDelay: document.getElementById('customDelay'),\n    startDelay: document.getElementById('startDelay'),\n    enableMistakes: document.getElementById('enableMistakes'),\n    enablePauses: document.getElementById('enablePauses'),\n    startBtn: document.getElementById('startBtn'),\n    stopBtn: document.getElementById('stopBtn'),\n    clipboardBtn: document.getElementById('clipboardBtn'),\n    status: document.getElementById('status'),\n    mainButtons: document.getElementById('mainButtons'),\n    stopButtonGroup: document.getElementById('stopButtonGroup'),\n    statsSection: document.getElementById('statsSection'),\n    progressBarContainer: document.getElementById('progressBarContainer'),\n    progressBar: document.getElementById('progressBar'),\n    wpmStat: document.getElementById('wpmStat'),\n    progressStat: document.getElementById('progressStat'),\n    timeStat: document.getElementById('timeStat')\n  };\n  \n  // State\n  let isTyping = false;\n  let typingStartTime = null;\n  let currentText = '';\n  let typingStats = { wpm: 0, progress: 0, elapsed: 0 };\n  \n  // Event Listeners\n  elements.speedPreset.addEventListener('change', handleSpeedPresetChange);\n  elements.startBtn.addEventListener('click', handleStartTyping);\n  elements.stopBtn.addEventListener('click', handleStopTyping);\n  elements.clipboardBtn.addEventListener('click', handleGetClipboard);\n  \n  // Initialize\n  updateStatus('Ready to type', 'info');\n  loadSettings();\n  \n  function handleSpeedPresetChange() {\n    const isCustom = elements.speedPreset.value === 'custom';\n    elements.customSpeedGroup.style.display = isCustom ? 'flex' : 'none';\n  }\n  \n  async function handleGetClipboard() {\n    try {\n      updateStatus('Reading clipboard...', 'info');\n      elements.clipboardBtn.disabled = true;\n      \n      const text = await navigator.clipboard.readText();\n      if (text && text.trim()) {\n        elements.customText.value = text;\n        updateStatus(`Clipboard text loaded (${text.length} characters)`, 'success');\n      } else {\n        updateStatus('Clipboard is empty', 'warning');\n      }\n    } catch (error) {\n      updateStatus('Could not read clipboard - check permissions', 'error');\n    } finally {\n      elements.clipboardBtn.disabled = false;\n    }\n  }\n  \n  async function handleStartTyping() {\n    if (isTyping) return;\n    \n    try {\n      // Get text to type\n      const customText = elements.customText.value.trim();\n      let textToType = customText;\n      \n      // If no custom text, try clipboard\n      if (!textToType) {\n        try {\n          textToType = await navigator.clipboard.readText();\n          if (!textToType || !textToType.trim()) {\n            textToType = 'This is a test of human-like typing. The quick brown fox jumps over the lazy dog.';\n            updateStatus('Using default text - no custom text or clipboard content found', 'info');\n          }\n        } catch {\n          textToType = 'This is a test of human-like typing. The quick brown fox jumps over the lazy dog.';\n          updateStatus('Using default text - clipboard access denied', 'info');\n        }\n      }\n      \n      currentText = textToType;\n      \n      // Get settings\n      const settings = getTypingSettings();\n      \n      // Save settings\n      saveSettings(settings);\n      \n      // Start typing countdown\n      await startTypingCountdown(settings.startDelay);\n      \n      // Send message to content script\n      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n      if (!tabs || tabs.length === 0) {\n        throw new Error('No active tab found');\n      }\n      \n      const response = await chrome.tabs.sendMessage(tabs[0].id, {\n        action: 'startTyping',\n        text: textToType,\n        settings: settings\n      });\n      \n      if (!response || !response.success) {\n        throw new Error(response?.error || 'Failed to start typing');\n      }\n      \n      // Update UI for typing state\n      setTypingState(true);\n      startStatsTracking();\n      \n    } catch (error) {\n      updateStatus(`Error: ${error.message}`, 'error');\n      setTypingState(false);\n    }\n  }\n  \n  async function handleStopTyping() {\n    try {\n      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n      if (tabs && tabs.length > 0) {\n        await chrome.tabs.sendMessage(tabs[0].id, { action: 'stopTyping' });\n      }\n      \n      setTypingState(false);\n      updateStatus('Typing stopped', 'warning');\n    } catch (error) {\n      updateStatus('Could not stop typing', 'error');\n    }\n  }\n  \n  function getTypingSettings() {\n    const speedPreset = elements.speedPreset.value;\n    let minDelay, maxDelay;\n    \n    switch (speedPreset) {\n      case 'slow':\n        minDelay = 200;\n        maxDelay = 800;\n        break;\n      case 'fast':\n        minDelay = 50;\n        maxDelay = 200;\n        break;\n      case 'custom':\n        const customDelay = parseInt(elements.customDelay.value) || 150;\n        minDelay = Math.max(10, customDelay - 50);\n        maxDelay = customDelay + 100;\n        break;\n      default: // normal\n        minDelay = 100;\n        maxDelay = 400;\n    }\n    \n    return {\n      minDelay,\n      maxDelay,\n      startDelay: parseFloat(elements.startDelay.value) || 3,\n      enableMistakes: elements.enableMistakes.checked,\n      enablePauses: elements.enablePauses.checked,\n      speedPreset\n    };\n  }\n  \n  async function startTypingCountdown(delay) {\n    if (delay <= 0) return;\n    \n    const startTime = Date.now();\n    const endTime = startTime + (delay * 1000);\n    \n    return new Promise((resolve) => {\n      const updateCountdown = () => {\n        const now = Date.now();\n        const remaining = Math.max(0, Math.ceil((endTime - now) / 1000));\n        \n        if (remaining > 0) {\n          updateStatus(`Starting in ${remaining} seconds... Click in a text field now!`, 'info');\n          setTimeout(updateCountdown, 100);\n        } else {\n          updateStatus('Typing started!', 'success');\n          resolve();\n        }\n      };\n      \n      updateCountdown();\n    });\n  }\n  \n  function setTypingState(typing) {\n    isTyping = typing;\n    \n    if (typing) {\n      elements.mainButtons.style.display = 'none';\n      elements.stopButtonGroup.style.display = 'block';\n      elements.statsSection.style.display = 'grid';\n      elements.progressBarContainer.style.display = 'block';\n      typingStartTime = Date.now();\n    } else {\n      elements.mainButtons.style.display = 'grid';\n      elements.stopButtonGroup.style.display = 'none';\n      elements.statsSection.style.display = 'none';\n      elements.progressBarContainer.style.display = 'none';\n      typingStartTime = null;\n    }\n    \n    // Disable/enable form elements\n    const formElements = [\n      elements.customText, elements.speedPreset, elements.customDelay,\n      elements.startDelay, elements.enableMistakes, elements.enablePauses\n    ];\n    \n    formElements.forEach(el => el.disabled = typing);\n  }\n  \n  function startStatsTracking() {\n    if (!isTyping) return;\n    \n    const updateStats = () => {\n      if (!isTyping || !typingStartTime) return;\n      \n      const elapsed = (Date.now() - typingStartTime) / 1000;\n      const progress = Math.min(100, (elapsed / (currentText.length * 0.15)) * 100); // Rough estimate\n      const wordsTyped = (currentText.length * (progress / 100)) / 5; // Average 5 chars per word\n      const wpm = elapsed > 0 ? Math.round((wordsTyped / elapsed) * 60) : 0;\n      \n      // Update UI\n      elements.wpmStat.textContent = Math.max(0, wpm);\n      elements.progressStat.textContent = Math.round(progress);\n      elements.timeStat.textContent = `${Math.round(elapsed)}s`;\n      elements.progressBar.style.width = `${progress}%`;\n      \n      if (isTyping) {\n        setTimeout(updateStats, 1000);\n      }\n    };\n    \n    updateStats();\n  }\n  \n  function updateStatus(message, type = 'info') {\n    elements.status.textContent = message;\n    elements.status.className = `status ${type}`;\n  }\n  \n  function saveSettings(settings) {\n    try {\n      localStorage.setItem('pasteHumanSettings', JSON.stringify(settings));\n    } catch (error) {\n      console.warn('Could not save settings:', error);\n    }\n  }\n  \n  function loadSettings() {\n    try {\n      const savedSettings = localStorage.getItem('pasteHumanSettings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        \n        if (settings.speedPreset) elements.speedPreset.value = settings.speedPreset;\n        if (settings.customDelay) elements.customDelay.value = settings.customDelay;\n        if (settings.startDelay !== undefined) elements.startDelay.value = settings.startDelay;\n        if (settings.enableMistakes !== undefined) elements.enableMistakes.checked = settings.enableMistakes;\n        if (settings.enablePauses !== undefined) elements.enablePauses.checked = settings.enablePauses;\n        \n        handleSpeedPresetChange();\n      }\n    } catch (error) {\n      console.warn('Could not load settings:', error);\n    }\n  }\n});"],"names":["document","addEventListener","elements","customText","getElementById","speedPreset","customSpeedGroup","customDelay","startDelay","enableMistakes","enablePauses","startBtn","stopBtn","clipboardBtn","status","mainButtons","stopButtonGroup","statsSection","progressBarContainer","progressBar","wpmStat","progressStat","timeStat","isTyping","typingStartTime","currentText","handleSpeedPresetChange","isCustom","value","style","display","setTypingState","typing","Date","now","forEach","el","disabled","updateStatus","message","type","arguments","length","undefined","textContent","className","concat","async","_context","textToType","_trimInstanceProperty","call","navigator","clipboard","readText","_unused","settings","minDelay","maxDelay","parseInt","Math","max","parseFloat","checked","getTypingSettings","localStorage","setItem","JSON","stringify","error","console","warn","saveSettings","delay","endTime","Promise","resolve","updateCountdown","remaining","ceil","setTimeout","startTypingCountdown","tabs","chrome","query","active","currentWindow","Error","response","sendMessage","id","action","text","success","updateStats","elapsed","progress","min","wordsTyped","wpm","round","width","startStatsTracking","savedSettings","getItem","parse","loadSettings"],"sourceRoot":""}